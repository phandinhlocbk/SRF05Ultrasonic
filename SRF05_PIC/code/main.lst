CCS PCM C Compiler, Version 4.114, 93460303               15-Oct-12 17:32

               Filename: D:\Company\Project\Du An Ben Trong\phan mem\study\SRF05_PIC\code\main.lst

               ROM used: 1525 words (19%)
                         Largest free fragment is 2048
               RAM used: 46 (12%) at main() level
                         71 (19%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   53F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.0
001E:  GOTO   021
001F:  BTFSC  0C.0
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   038
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   059
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... //#include "string.h" 
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
00B6:  MOVLW  50
00B7:  MOVWF  04
00B8:  BCF    03.7
00B9:  MOVF   00,W
00BA:  BTFSC  03.2
00BB:  GOTO   0CA
00BC:  MOVLW  07
00BD:  MOVWF  78
00BE:  CLRF   77
00BF:  DECFSZ 77,F
00C0:  GOTO   0BF
00C1:  DECFSZ 78,F
00C2:  GOTO   0BE
00C3:  MOVLW  C7
00C4:  MOVWF  77
00C5:  DECFSZ 77,F
00C6:  GOTO   0C5
00C7:  NOP
00C8:  DECFSZ 00,F
00C9:  GOTO   0BC
00CA:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... #use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... //#use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... #CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... unsigned int32 num_pulse=0; 
.................... int1 range_ok=0; 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
00CB:  BSF    09.2
....................  delay_us(3); 
00CC:  MOVLW  05
00CD:  MOVWF  77
00CE:  DECFSZ 77,F
00CF:  GOTO   0CE
00D0:  GOTO   0D1
....................  output_low(LCD_EN); 
00D1:  BCF    09.2
....................  delay_us(50);  
00D2:  MOVLW  63
00D3:  MOVWF  77
00D4:  DECFSZ 77,F
00D5:  GOTO   0D4
00D6:  GOTO   0D7
.................... } 
00D7:  RETURN
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
008F:  BTFSC  4E.0
0090:  GOTO   093
0091:  BCF    08.4
0092:  GOTO   094
0093:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0094:  BCF    03.0
0095:  RRF    4E,W
0096:  ANDLW  01
0097:  BTFSS  03.2
0098:  GOTO   09B
0099:  BCF    08.5
009A:  GOTO   09C
009B:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
009C:  RRF    4E,W
009D:  MOVWF  77
009E:  RRF    77,F
009F:  MOVLW  3F
00A0:  ANDWF  77,F
00A1:  MOVF   77,W
00A2:  ANDLW  01
00A3:  BTFSS  03.2
00A4:  GOTO   0A7
00A5:  BCF    08.6
00A6:  GOTO   0A8
00A7:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
00A8:  RRF    4E,W
00A9:  MOVWF  77
00AA:  RRF    77,F
00AB:  RRF    77,F
00AC:  MOVLW  1F
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  ANDLW  01
00B0:  BTFSS  03.2
00B1:  GOTO   0B4
00B2:  BCF    08.7
00B3:  GOTO   0B5
00B4:  BSF    08.7
.................... } 
00B5:  RETURN
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
00D8:  SWAPF  4C,W
00D9:  MOVWF  4D
00DA:  MOVLW  0F
00DB:  ANDWF  4D,F
00DC:  MOVF   4D,W
00DD:  MOVWF  4E
00DE:  CALL   08F
.................... LCD_Enable () ; 
00DF:  CALL   0CB
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
00E0:  MOVF   4C,W
00E1:  MOVWF  4E
00E2:  CALL   08F
.................... LCD_Enable () ; 
00E3:  CALL   0CB
.................... } 
00E4:  RETURN
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
00E5:  BSF    03.5
00E6:  BCF    08.4
.................... output_drive(LCD_D5); 
00E7:  BCF    08.5
.................... output_drive(LCD_D6); 
00E8:  BCF    08.6
.................... output_drive(LCD_D7); 
00E9:  BCF    08.7
.................... output_drive(LCD_EN); 
00EA:  BCF    09.2
.................... output_drive(LCD_RS); 
00EB:  BCF    09.0
.................... output_drive(LCD_RW); 
00EC:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
00ED:  BCF    03.5
00EE:  CLRF   4E
00EF:  CALL   08F
.................... delay_ms(20); 
00F0:  MOVLW  14
00F1:  MOVWF  50
00F2:  CALL   0B6
.................... output_low(LCD_RS); 
00F3:  BCF    09.0
.................... output_low(LCD_RW); 
00F4:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
00F5:  MOVLW  03
00F6:  MOVWF  4E
00F7:  CALL   08F
.................... LCD_Enable(); 
00F8:  CALL   0CB
.................... delay_ms(5); 
00F9:  MOVLW  05
00FA:  MOVWF  50
00FB:  CALL   0B6
.................... LCD_Enable(); 
00FC:  CALL   0CB
.................... delay_us(100); 
00FD:  MOVLW  C7
00FE:  MOVWF  77
00FF:  DECFSZ 77,F
0100:  GOTO   0FF
0101:  GOTO   102
.................... LCD_Enable(); 
0102:  CALL   0CB
.................... LCD_Send4Bit(0x02); 
0103:  MOVLW  02
0104:  MOVWF  4E
0105:  CALL   08F
.................... LCD_Enable(); 
0106:  CALL   0CB
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
0107:  MOVLW  28
0108:  MOVWF  4C
0109:  CALL   0D8
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
010A:  MOVLW  0C
010B:  MOVWF  4C
010C:  CALL   0D8
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
010D:  MOVLW  06
010E:  MOVWF  4C
010F:  CALL   0D8
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
0110:  MOVLW  01
0111:  MOVWF  4C
0112:  CALL   0D8
.................... } 
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   55C (RETURN)
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
0191:  MOVF   49,F
0192:  BTFSS  03.2
0193:  GOTO   198
....................   address = (0x80+x); 
0194:  MOVLW  80
0195:  ADDWF  48,W
0196:  MOVWF  4A
....................   else 
0197:  GOTO   19B
....................   address = (0xC0+x); 
0198:  MOVLW  C0
0199:  ADDWF  48,W
019A:  MOVWF  4A
....................   delay_us(1000); 
019B:  MOVLW  01
019C:  MOVWF  50
019D:  CALL   0B6
....................   LCD_SendCommand(address); 
019E:  MOVF   4A,W
019F:  MOVWF  4C
01A0:  CALL   0D8
....................   delay_ms(10); 
01A1:  MOVLW  0A
01A2:  MOVWF  50
01A3:  CALL   0B6
.................... } 
01A4:  RETURN
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
0188:  MOVLW  01
0189:  MOVWF  4C
018A:  CALL   0D8
....................   delay_ms(10); 
018B:  MOVLW  0A
018C:  MOVWF  50
018D:  CALL   0B6
.................... } 
018E:  BCF    0A.3
018F:  BCF    0A.4
0190:  GOTO   575 (RETURN)
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
017E:  BSF    09.0
....................  LCD_SendCommand( Data ); 
017F:  MOVF   4B,W
0180:  MOVWF  4C
0181:  CALL   0D8
....................  output_low(LCD_RS); 
0182:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
....................    { 
*
0169:  MOVF   49,W
016A:  MOVWF  7A
016B:  MOVF   48,W
016C:  MOVWF  04
016D:  BCF    03.7
016E:  BTFSC  7A.0
016F:  BSF    03.7
0170:  MOVF   00,F
0171:  BTFSC  03.2
0172:  GOTO   187
....................       LCD_PutChar(*s); 
0173:  MOVF   49,W
0174:  MOVWF  7A
0175:  MOVF   48,W
0176:  MOVWF  04
0177:  BCF    03.7
0178:  BTFSC  7A.0
0179:  BSF    03.7
017A:  MOVF   00,W
017B:  MOVWF  4A
017C:  MOVF   4A,W
017D:  MOVWF  4B
....................       s++; 
*
0183:  INCF   48,F
0184:  BTFSC  03.2
0185:  INCF   49,F
....................    } 
0186:  GOTO   169
.................... } 
0187:  RETURN
.................... void LCD_PutsDelay (char *s,unsigned int time) 
.................... { 
....................    while (*s) 
....................    { 
....................       LCD_PutChar(*s); 
....................       s++; 
....................       delay_ms(time); 
....................    }   
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #define SRF05_TRIGGER1   PIN_B1 
.................... #define SRF05_TRIGGER2   PIN_B2 
.................... #define SRF05_TRIGGER3   PIN_B3 
.................... #define SRF05_ECHO      PIN_B0 
.................... #define NO_OBJECT       0 
.................... #INT_EXT 
.................... void Ngat_Ngoai(void) 
.................... {   
....................    disable_interrupts(GLOBAL); 
*
0038:  BCF    0B.6
0039:  BCF    0B.7
003A:  BTFSC  0B.7
003B:  GOTO   039
....................    num_pulse+=get_timer1(); 
003C:  MOVF   0F,W
003D:  MOVWF  7A
003E:  MOVF   0E,W
003F:  MOVWF  77
0040:  MOVF   0F,W
0041:  SUBWF  7A,W
0042:  BTFSS  03.2
0043:  GOTO   03C
0044:  MOVF   77,W
0045:  ADDWF  28,F
0046:  MOVF   7A,W
0047:  BTFSC  03.0
0048:  INCFSZ 7A,W
0049:  ADDWF  29,F
004A:  MOVLW  00
004B:  BTFSC  03.0
004C:  MOVLW  01
004D:  ADDWF  2A,F
004E:  MOVLW  00
004F:  BTFSC  03.0
0050:  MOVLW  01
0051:  ADDWF  2B,F
....................    range_ok=1; 
0052:  BSF    2C.0
....................    enable_interrupts(GLOBAL); 
0053:  MOVLW  C0
0054:  IORWF  0B,F
.................... } 
0055:  BCF    0B.1
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   021
.................... #INT_TIMER1            
.................... void  Ngat_Timer1(void)  
.................... { 
....................    disable_interrupts(GLOBAL); 
0059:  BCF    0B.6
005A:  BCF    0B.7
005B:  BTFSC  0B.7
005C:  GOTO   05A
....................    num_pulse+=0xffff;  
005D:  MOVLW  FF
005E:  ADDWF  28,F
005F:  BTFSS  03.0
0060:  ADDWF  29,F
0061:  MOVLW  00
0062:  BTFSC  03.0
0063:  MOVLW  01
0064:  ADDWF  2A,F
0065:  MOVLW  00
0066:  BTFSC  03.0
0067:  MOVLW  01
0068:  ADDWF  2B,F
....................    enable_interrupts(GLOBAL); 
0069:  MOVLW  C0
006A:  IORWF  0B,F
.................... } 
006B:  BCF    0C.0
006C:  BCF    0A.3
006D:  BCF    0A.4
006E:  GOTO   021
.................... void  SRF05_StartRange() 
.................... { 
....................    while(!range_ok) 
....................    { 
*
01FC:  BTFSC  2C.0
01FD:  GOTO   20D
....................          output_high(SRF05_TRIGGER1); 
01FE:  BSF    06.1
....................          delay_ms(15);                          // Phai tao 1 xung len co do lon it nhat 10ms 
01FF:  MOVLW  0F
0200:  MOVWF  50
0201:  CALL   0B6
....................          output_low(SRF05_TRIGGER1);             // Bat dau phep do. 
0202:  BCF    06.1
....................          while(!(input(SRF05_ECHO)));           // Doi cho den khi chan ECHO duoc keo len cao 
0203:  BTFSS  06.0
0204:  GOTO   203
....................          set_timer1(0); 
0205:  CLRF   0F
0206:  CLRF   0E
....................          enable_interrupts(GLOBAL); 
0207:  MOVLW  C0
0208:  IORWF  0B,F
....................          delay_ms(50); 
0209:  MOVLW  32
020A:  MOVWF  50
020B:  CALL   0B6
....................    } 
020C:  GOTO   1FC
.................... } 
.................... float32 SRF05_GetDistance() 
.................... { 
*
01F4:  CLRF   4B
01F5:  CLRF   4A
01F6:  CLRF   49
01F7:  CLRF   48
01F8:  CLRF   4F
01F9:  CLRF   4E
01FA:  CLRF   4D
01FB:  CLRF   4C
....................    float32 time_us=0,distance=0; 
....................    SRF05_StartRange(); 
....................    disable_interrupts(GLOBAL); 
*
020D:  BCF    0B.6
020E:  BCF    0B.7
020F:  BTFSC  0B.7
0210:  GOTO   20E
....................    if(num_pulse>180000) 
0211:  MOVF   2B,F
0212:  BTFSS  03.2
0213:  GOTO   226
0214:  MOVF   2A,W
0215:  SUBLW  01
0216:  BTFSC  03.0
0217:  GOTO   231
0218:  XORLW  FF
0219:  BTFSS  03.2
021A:  GOTO   226
021B:  MOVF   29,W
021C:  SUBLW  BE
021D:  BTFSC  03.0
021E:  GOTO   231
021F:  XORLW  FF
0220:  BTFSS  03.2
0221:  GOTO   226
0222:  MOVF   28,W
0223:  SUBLW  20
0224:  BTFSC  03.0
0225:  GOTO   231
....................    { 
....................       num_pulse=0; 
0226:  CLRF   2B
0227:  CLRF   2A
0228:  CLRF   29
0229:  CLRF   28
....................       range_ok=0; 
022A:  BCF    2C.0
....................    return NO_OBJECT; 
022B:  CLRF   77
022C:  CLRF   78
022D:  CLRF   79
022E:  CLRF   7A
022F:  GOTO   357
....................    } 
....................    else 
0230:  GOTO   357
....................    { 
....................       time_us=num_pulse/6; 
0231:  BCF    03.1
0232:  MOVF   2B,W
0233:  MOVWF  58
0234:  MOVF   2A,W
0235:  MOVWF  57
0236:  MOVF   29,W
0237:  MOVWF  56
0238:  MOVF   28,W
0239:  MOVWF  55
023A:  CLRF   5C
023B:  CLRF   5B
023C:  CLRF   5A
023D:  MOVLW  06
023E:  MOVWF  59
023F:  CALL   1A5
0240:  MOVF   7A,W
0241:  MOVWF  53
0242:  MOVF   79,W
0243:  MOVWF  52
0244:  MOVF   78,W
0245:  MOVWF  51
0246:  MOVF   77,W
0247:  MOVWF  50
*
0262:  MOVF   7A,W
0263:  MOVWF  4B
0264:  MOVF   79,W
0265:  MOVWF  4A
0266:  MOVF   78,W
0267:  MOVWF  49
0268:  MOVF   77,W
0269:  MOVWF  48
....................       distance=time_us/58; 
026A:  MOVF   4B,W
026B:  MOVWF  53
026C:  MOVF   4A,W
026D:  MOVWF  52
026E:  MOVF   49,W
026F:  MOVWF  51
0270:  MOVF   48,W
0271:  MOVWF  50
0272:  CLRF   57
0273:  CLRF   56
0274:  MOVLW  68
0275:  MOVWF  55
0276:  MOVLW  84
0277:  MOVWF  54
*
0341:  MOVF   7A,W
0342:  MOVWF  4F
0343:  MOVF   79,W
0344:  MOVWF  4E
0345:  MOVF   78,W
0346:  MOVWF  4D
0347:  MOVF   77,W
0348:  MOVWF  4C
....................       num_pulse=0; 
0349:  CLRF   2B
034A:  CLRF   2A
034B:  CLRF   29
034C:  CLRF   28
....................       range_ok=0; 
034D:  BCF    2C.0
....................    return distance; 
034E:  MOVF   4C,W
034F:  MOVWF  77
0350:  MOVF   4D,W
0351:  MOVWF  78
0352:  MOVF   4E,W
0353:  MOVWF  79
0354:  MOVF   4F,W
0355:  MOVWF  7A
0356:  GOTO   357
....................    } 
.................... } 
0357:  BCF    0A.3
0358:  BCF    0A.4
0359:  GOTO   596 (RETURN)
.................... void main() 
.................... {   
*
053F:  CLRF   04
0540:  BCF    03.7
0541:  MOVLW  1F
0542:  ANDWF  03,F
0543:  MOVLW  FF
0544:  MOVWF  27
0545:  CLRF   2B
0546:  CLRF   2A
0547:  CLRF   29
0548:  CLRF   28
0549:  BCF    2C.0
054A:  CLRF   2E
054B:  CLRF   2D
054C:  BSF    03.5
054D:  BSF    1F.0
054E:  BSF    1F.1
054F:  BSF    1F.2
0550:  BCF    1F.3
0551:  MOVLW  07
0552:  MOVWF  1C
0553:  BCF    03.5
0554:  CLRF   43
....................    unsigned char str[20],i=0; 
....................    float32 range; 
....................    output_float(SRF05_ECHO); 
0555:  BSF    03.5
0556:  BSF    06.0
....................    output_drive(SRF05_TRIGGER1); 
0557:  BCF    06.1
....................    output_drive(SRF05_TRIGGER2); 
0558:  BCF    06.2
....................    output_drive(SRF05_TRIGGER3); 
0559:  BCF    06.3
....................    LCD_Init(); 
055A:  BCF    03.5
055B:  GOTO   0E5
....................    sprintf(str,"DEMO SRF05"); 
055C:  CLRF   2E
055D:  MOVLW  2F
055E:  MOVWF  2D
055F:  MOVLW  6F
0560:  BSF    03.6
0561:  MOVWF  0D
0562:  MOVLW  00
0563:  MOVWF  0F
0564:  BCF    03.6
0565:  CALL   123
....................    delay_ms(10); 
0566:  MOVLW  0A
0567:  MOVWF  50
0568:  CALL   0B6
....................    LCD_Puts(str); 
0569:  CLRF   49
056A:  MOVLW  2F
056B:  MOVWF  48
056C:  CALL   169
....................    delay_ms(1000); 
056D:  MOVLW  04
056E:  MOVWF  48
056F:  MOVLW  FA
0570:  MOVWF  50
0571:  CALL   0B6
0572:  DECFSZ 48,F
0573:  GOTO   56F
....................    LCD_Clear(); 
0574:  GOTO   188
....................    sprintf(str,"BanLinhKien.Vn"); 
0575:  CLRF   2E
0576:  MOVLW  2F
0577:  MOVWF  2D
0578:  MOVLW  75
0579:  BSF    03.6
057A:  MOVWF  0D
057B:  MOVLW  00
057C:  MOVWF  0F
057D:  BCF    03.6
057E:  CALL   123
....................    LCD_Gotoxy(1,0); 
057F:  MOVLW  01
0580:  MOVWF  48
0581:  CLRF   49
0582:  CALL   191
....................    LCD_Puts(str);  
0583:  CLRF   49
0584:  MOVLW  2F
0585:  MOVWF  48
0586:  CALL   169
....................    port_b_pullups (TRUE); 
0587:  BSF    03.5
0588:  BCF    01.7
....................    ext_int_edge(H_TO_L);                  // ngat canh xuong 
0589:  BCF    01.6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);//F_TIMER1=F_OSC/4 
058A:  MOVLW  85
058B:  BCF    03.5
058C:  MOVWF  10
....................    enable_interrupts(INT_TIMER1); 
058D:  BSF    03.5
058E:  BSF    0C.0
....................    enable_interrupts(INT_EXT);            // kich hoat ngat ngoai 
058F:  BCF    03.5
0590:  BSF    0B.4
....................    disable_interrupts(GLOBAL); 
0591:  BCF    0B.6
0592:  BCF    0B.7
0593:  BTFSC  0B.7
0594:  GOTO   592
....................    while(TRUE) 
....................    { 
....................             range=SRF05_GetDistance(); 
0595:  GOTO   1F4
0596:  MOVF   7A,W
0597:  MOVWF  47
0598:  MOVF   79,W
0599:  MOVWF  46
059A:  MOVF   78,W
059B:  MOVWF  45
059C:  MOVF   77,W
059D:  MOVWF  44
....................             if(range==NO_OBJECT) 
059E:  MOVF   47,W
059F:  MOVWF  4B
05A0:  MOVF   46,W
05A1:  MOVWF  4A
05A2:  MOVF   45,W
05A3:  MOVWF  49
05A4:  MOVF   44,W
05A5:  MOVWF  48
05A6:  CLRF   4F
05A7:  CLRF   4E
05A8:  CLRF   4D
05A9:  CLRF   4C
05AA:  GOTO   35A
05AB:  BTFSS  03.2
05AC:  GOTO   5C7
....................             { 
....................                LCD_Gotoxy(0,1); 
05AD:  CLRF   48
05AE:  MOVLW  01
05AF:  MOVWF  49
05B0:  CALL   191
....................                sprintf(str,"Khong Co Vat Can"); 
05B1:  CLRF   2E
05B2:  MOVLW  2F
05B3:  MOVWF  2D
05B4:  MOVLW  7D
05B5:  BSF    03.6
05B6:  MOVWF  0D
05B7:  MOVLW  00
05B8:  MOVWF  0F
05B9:  BCF    03.6
05BA:  CALL   123
....................                LCD_Puts(str); 
05BB:  CLRF   49
05BC:  MOVLW  2F
05BD:  MOVWF  48
05BE:  CALL   169
....................                delay_ms(500); 
05BF:  MOVLW  02
05C0:  MOVWF  48
05C1:  MOVLW  FA
05C2:  MOVWF  50
05C3:  CALL   0B6
05C4:  DECFSZ 48,F
05C5:  GOTO   5C1
....................             } 
....................             else 
05C6:  GOTO   5F3
....................             { 
....................                LCD_Gotoxy(0,1); 
05C7:  CLRF   48
05C8:  MOVLW  01
05C9:  MOVWF  49
05CA:  CALL   191
....................                sprintf(str,"Dis : %3.2f Cm  ",range); 
05CB:  CLRF   2E
05CC:  MOVLW  2F
05CD:  MOVWF  2D
05CE:  MOVLW  86
05CF:  BSF    03.6
05D0:  MOVWF  0D
05D1:  MOVLW  00
05D2:  MOVWF  0F
05D3:  BCF    03.0
05D4:  MOVLW  06
05D5:  BCF    03.6
05D6:  MOVWF  48
05D7:  CALL   39B
05D8:  MOVLW  02
05D9:  MOVWF  04
05DA:  MOVF   47,W
05DB:  MOVWF  4B
05DC:  MOVF   46,W
05DD:  MOVWF  4A
05DE:  MOVF   45,W
05DF:  MOVWF  49
05E0:  MOVF   44,W
05E1:  MOVWF  48
05E2:  MOVLW  02
05E3:  MOVWF  4C
05E4:  GOTO   3EA
05E5:  MOVLW  8B
05E6:  BSF    03.6
05E7:  MOVWF  0D
05E8:  MOVLW  00
05E9:  MOVWF  0F
05EA:  BSF    03.0
05EB:  MOVLW  05
05EC:  BCF    03.6
05ED:  MOVWF  48
05EE:  CALL   39B
....................                LCD_Puts(str); 
05EF:  CLRF   49
05F0:  MOVLW  2F
05F1:  MOVWF  48
05F2:  CALL   169
....................             } 
....................      } 
05F3:  GOTO   595
....................     
.................... } 
....................                  
05F4:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
